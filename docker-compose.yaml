version: '3.8'

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:7.2
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-init:
    image: apache/airflow:2.10.2
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow db init && \
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: "PyMuPDF google-cloud-documentai"  # Installing packages
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
    user: "0:0"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure

  airflow-webserver:
    image: apache/airflow:2.10.2
    environment:
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres:5432/airflow
      - GOOGLE_APPLICATION_CREDENTIALS=/opt/airflow/google_credentials.json
      - _PIP_ADDITIONAL_REQUIREMENTS=PyMuPDF google-cloud-documentai  # Installing packages
      - AIRFLOW__WEBSERVER__SECRET_KEY=017781b4b5b34031ef9a2b2aaab9d207
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/logs:/opt/airflow/logs
      - ~/.aws:/root/.aws:ro
    env_file:
      - .env  # Your .env file containing INFO
    depends_on:
      - postgres
      - redis
      - airflow-init
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: airflow webserver
    restart: always
    ports:
      - "8080:8080"

  airflow-scheduler:
    image: apache/airflow:2.10.2
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - GOOGLE_APPLICATION_CREDENTIALS=/opt/airflow/google_credentials.json
      - _PIP_ADDITIONAL_REQUIREMENTS=PyMuPDF google-cloud-documentai  # Installing packages
      - AIRFLOW__WEBSERVER__SECRET_KEY=017781b4b5b34031ef9a2b2aaab9d207
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ~/.aws:/root/.aws:ro
    env_file:
      - .env
    command: airflow scheduler
    restart: always
    depends_on:
      - airflow-webserver

  airflow-worker:
    image: apache/airflow:2.10.2
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres:5432/airflow
      - GOOGLE_APPLICATION_CREDENTIALS=/opt/airflow/google_credentials.json
      - _PIP_ADDITIONAL_REQUIREMENTS=PyMuPDF google-cloud-documentai  # Installing packages
      - AIRFLOW__WEBSERVER__SECRET_KEY=017781b4b5b34031ef9a2b2aaab9d207
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ~/.aws:/root/.aws:ro
    env_file:
      - .env
    command: airflow celery worker
    restart: always
    depends_on:
      - airflow-scheduler

  airflow-triggerer:
    image: apache/airflow:2.10.2
    command: airflow celery triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - airflow-init
    restart: always

  airflow-cli:
    image: apache/airflow:2.10.2
    profiles:
      - debug
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    depends_on:
      - postgres
    command: bash -c "airflow"

  fastapi:
    build:
      context: .
      dockerfile: ./fast_api/Dockerfile
    environment:
      - ENVIRONMENT=development
    depends_on:
      - postgres
    volumes:
      - ./:/app  # Mount the root directory to /app
    command: poetry run uvicorn fast_api.api:app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    env_file:
      - .env
    restart: always

  streamlit:
    build:
      context: .
      dockerfile: ./streamlit/Dockerfile
    ports:
      - "8501:8501"
    volumes:
      - ./:/app  # Mount the root directory to /app
    environment:
      - ENVIRONMENT=development
    depends_on:
      - fastapi
    command: poetry run streamlit run streamlit/app.py
    restart: always

volumes:
  postgres_data:
  postgres-db-volume:
